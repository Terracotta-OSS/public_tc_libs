/*
 * Copyright (c) 2012-2018 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.terracottatech.store.function;

import java.util.Comparator;
import java.util.function.ToIntFunction;

import static java.util.Comparator.comparingInt;

/**
 * A function of one argument that generates an {@code int} result, and
 * supports building derived functional types.
 *
 * @author Chris Dennis
 */
public interface BuildableToIntFunction<T> extends ToIntFunction<T> {

  /**
   * Returns a function that calculates the sum of {@code operand} and
   * {@code this}.
   *
   * @param operand the value to add
   * @return a summing function
   */
  default BuildableToIntFunction<T> add(int operand) {
    return t -> applyAsInt(t) + operand;
  }

  /**
   * Returns a function that subtracts {@code operand} from {@code this}.
   *
   * @param operand the value to subtract
   * @return a subtracting function
   */
  default BuildableToIntFunction<T> subtract(int operand) {
    return add(-operand);
  }

  /**
   * Returns a function that increments {@code this} by one.
   *
   * @return an incrementing function
   */
  default BuildableToIntFunction<T> increment() {
    return add(1);
  }

  /**
   * Returns a function that decrements {@code this} by one.
   *
   * @return a decrementing function
   */
  default BuildableToIntFunction<T> decrement() {
    return subtract(1);
  }

  /**
   * Returns a function that calculates the product of {@code this} and
   * {@code multiplier}.
   *
   * @param multiplier the multiplier
   * @return a multiplying function
   */
  default BuildableToIntFunction<T> multiply(int multiplier) {
    return t -> applyAsInt(t) * multiplier;
  }

  /**
   * Returns a function that calculates the quotient of {@code this} and
   * {@code divisor}.
   *
   * @param divisor the divisor
   * @return a dividing function
   */
  default BuildableToIntFunction<T> divide(int divisor) {
    return t -> applyAsInt(t) / divisor;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} for
   * <em>equality</em> with the supplied constant.
   *
   * @param test value to test against
   * @return an equality predicate
   */
  default BuildablePredicate<T> is(int test) {
    return t -> applyAsInt(t) == test;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>greater than</em> the supplied constant.
   *
   * @param test value to test against
   * @return a greater than predicate
   */
  default BuildablePredicate<T> isGreaterThan(int test) {
    return t -> applyAsInt(t) > test;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>less than</em> the supplied constant.
   *
   * @param test value to test against
   * @return a less than predicate
   */
  default BuildablePredicate<T> isLessThan(int test) {
    return t -> applyAsInt(t) < test;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>greater than or equal to</em> the supplied constant.
   *
   * @param test value to test against
   * @return a greater than or equal to predicate
   */
  default BuildablePredicate<T> isGreaterThanOrEqualTo(int test) {
    return t -> applyAsInt(t) >= test;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>less than or equal to</em> the supplied constant.
   *
   * @param test value to test against
   * @return a less than or equal to predicate
   */
  default BuildablePredicate<T> isLessThanOrEqualTo(int test) {
    return t -> applyAsInt(t) <= test;
  }

  /**
   * Returns a {@code Comparator} that orders objects using the integer values
   * mapped by this function.
   *
   * @return a comparator that orders using the mapped values
   */
  default Comparator<T> asComparator() {
    return comparingInt(this);
  }

  default BuildableComparableFunction<T, Integer> boxed() {
    return this::applyAsInt;
  }
}
