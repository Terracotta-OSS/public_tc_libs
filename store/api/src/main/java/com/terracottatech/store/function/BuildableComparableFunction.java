/*
 * Copyright (c) 2012-2018 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.terracottatech.store.function;

import java.util.Comparator;

import static java.util.Comparator.comparing;

/**
 * A function of one argument that generates a {@code Comparable} result, and
 * supports building derived functional types.
 *
 * @author Chris Dennis
 */
public interface BuildableComparableFunction<T, R extends Comparable<R>> extends BuildableFunction<T, R> {

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>greater than</em> the supplied constant.
   *
   * @param test value to test against
   * @return a greater than predicate
   */
  default BuildablePredicate<T> isGreaterThan(R test) {
    return t -> apply(t).compareTo(test) > 0;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>less than</em> the supplied constant.
   *
   * @param test value to test against
   * @return a less than predicate
   */
  default BuildablePredicate<T> isLessThan(R test) {
    return t -> apply(t).compareTo(test) < 0;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>greater than or equal to</em> the supplied constant.
   *
   * @param test value to test against
   * @return a greater than or equal to predicate
   */
  default BuildablePredicate<T> isGreaterThanOrEqualTo(R test) {
    return t -> apply(t).compareTo(test) >= 0;
  }

  /**
   * Returns a predicate that tests the value generated by {@code this} to see
   * if it is <em>less than or equal to</em> the supplied constant.
   *
   * @param test value to test against
   * @return a less than or equal to predicate
   */
  default BuildablePredicate<T> isLessThanOrEqualTo(R test) {
    return t -> apply(t).compareTo(test) <= 0;
  }

  /**
   * Returns a {@code Comparator} that orders objects using the values mapped by
   * this function.
   *
   * @return a comparator that orders using the mapped values
   */
  default Comparator<T> asComparator() {
    return comparing(this);
  }
}
