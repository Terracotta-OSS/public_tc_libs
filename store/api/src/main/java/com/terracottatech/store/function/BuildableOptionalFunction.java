/*
 * Copyright (c) 2012-2018 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.terracottatech.store.function;

import com.terracottatech.store.Type;

import java.util.Optional;
import java.util.function.Function;

import static com.terracottatech.store.internal.function.GatedPredicate.gated;

/**
 * A function of one argument that generates an {@code Optional} result , and
 * supports building derived functional types.
 *
 * @author cdennis
 */
public interface BuildableOptionalFunction<T, R> extends Function<T, Optional<R>> {

  /**
   * Returns a predicate that tests the value generated by {@code this} for
   * <em>equality</em> with the supplied constant. If {@code this} is a function
   * that generates an empty {@code Optional}, the returned predicate would always
   * evaluate to false
   *
   * @param test value to test against
   * @return an equality predicate
   */
  default BuildablePredicate<T> is(R test) {
    return gated(t -> apply(t).isPresent(), t -> apply(t).map(a -> Type.equals(a, test)).orElse(false));
  }
}
