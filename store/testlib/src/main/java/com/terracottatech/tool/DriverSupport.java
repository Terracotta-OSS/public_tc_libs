/*
 * Copyright (c) 2012-2018 Software AG, Darmstadt, Germany and/or Software AG USA Inc., Reston, VA, USA, and/or its subsidiaries and/or its affiliates and/or their licensors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.terracottatech.tool;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Locale;

/**
 * Contains members supporting testing the items in demo packages.
 */
public final class DriverSupport {

  /**
   * Private, niladic constructor to prevent instantiation
   */
  private DriverSupport() {
  }

  /**
   * Runs the {@link Procedure}, {@code p}, capturing stdout and stderr optionally suppressing normal output.
   * @param withEcho if {@code true}, echos the output to the original stream as well as capturing it;
   *                 if {@code false} the output is not echoed to the original stream
   * @param p the {@code Procedure} to run
   * @return an array containing {@link BufferedReader} instances for the output generated by {@code p};
   *          element {@code 0} is stdout and element {@code 1} is stderr
   * @throws Exception if thrown by {@code p}
   */
  @SuppressFBWarnings("OS_OPEN_STREAM")
  public static BufferedReader[] capturingOutput(boolean withEcho, Procedure p) throws Exception {
    PrintStream systemOut = System.out;
    systemOut.flush();
    PrintStream systemErr = System.err;
    systemErr.flush();

    CapturedPrintStream outStream = (withEcho ? new CapturedPrintStream(systemOut) : new CapturedPrintStream());
    CapturedPrintStream errStream = (withEcho ? new CapturedPrintStream(systemErr) : new CapturedPrintStream());
    try {
      System.setOut(outStream);
      System.setErr(systemErr);
      p.invoke();
    } finally {
      System.setOut(systemOut);
      System.setErr(systemErr);
    }

    return new BufferedReader[] { outStream.getReader(), errStream.getReader() };
  }

  /**
   * Runs the {@link Procedure}, {@code p}, capturing stdout and stderr suppressing normal output.
   * @param p the {@code Procedure} to run
   * @return an array containing {@link BufferedReader} instances for the output generated by {@code p};
   *          element {@code 0} is stdout and element {@code 1} is stderr
   * @throws Exception if thrown by {@code p}
   */
  public static BufferedReader[] capturingOutput(Procedure p) throws Exception {
    return capturingOutput(false, p);
  }

  @FunctionalInterface
  public interface Procedure {
    void invoke() throws Exception;
  }

  /**
   * Extends {@link PrintStream} to capture the output.
   * <p>
   * Use {@code new CapturedPrintStream(otherPrintStream} to create a {@code CapturedPrintStream} that
   * echos all data written to another {@code PrintStream} in addition to saving it.
   */
  @SuppressFBWarnings("DM_DEFAULT_ENCODING")
  private static final class CapturedPrintStream extends PrintStream {

    private final PrintStream echoStream;

    CapturedPrintStream() {
      this(new PrintStream(new OutputStream() {
        @Override
        public void write(int b) {
          // Ignored
        }
      }, false));
    }

    /**
     * Creates a new {@code CapturedPrintStream} that echos the output to another {@code PrintStream}.
     * @param echoStream the {@code PrintStream} to which output is echoed
     */
    CapturedPrintStream(PrintStream echoStream) {
      super(new LocalBufferedOutputStream(4096), false);
      this.echoStream = echoStream;
    }


    /**
     * Gets a {@code BufferedReader} over the bytes written to this {@code PrintStream}.
     * @return a new {@code BufferedReader} over the bytes written to this stream
     */
    BufferedReader getReader() {
      flush();
      return new BufferedReader(new InputStreamReader(new ByteArrayInputStream(toByteArray())), 4096);
    }

    private byte[] toByteArray() {
      return ((LocalBufferedOutputStream)out).toByteArray();
    }

    // ----------------------------------------------------------------------------------
    // The following overridden methods are sufficient for echoing all of the data written
    // to a PrintStream -- the implementation of the omitted methods are dependent on these.
    // ----------------------------------------------------------------------------------

    @Override
    public void flush() {
      echoStream.flush();
      super.flush();
    }

    @Override
    public void write(int b) {
      echoStream.write(b);
      super.write(b);
    }

    @Override
    public void write(byte[] buf, int off, int len) {
      echoStream.write(buf, off, len);
      super.write(buf, off, len);
    }

    @Override
    public void println() {
      echoStream.println();
      super.println();
    }

    @Override
    public PrintStream format(String format, Object... args) {
      echoStream.format(format, args);
      return super.format(format, args);
    }

    @Override
    public PrintStream format(Locale l, String format, Object... args) {
      echoStream.format(l, format, args);
      return super.format(l, format, args);
    }

    private static final class LocalBufferedOutputStream extends BufferedOutputStream {
      LocalBufferedOutputStream(int size) {
        super(new ByteArrayOutputStream(size), size);
      }

      byte[] toByteArray() {
        return ((ByteArrayOutputStream)out).toByteArray();
      }
    }
  }
}
